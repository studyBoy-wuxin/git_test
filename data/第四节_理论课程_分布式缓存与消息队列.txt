分布式缓存与消息队列第四组：田杰、徐玉清、左悦、赵英宏分布式缓存1

第一部分总体介绍2

第二部分主要技术特性4

第四部分分布式缓存应用场景3

第三部分常见分布式缓存对比分布式缓存-CTGCache3什么是缓存•缓存就是数据交换的缓冲区（称作Cache），是存贮数据（使用频繁的数据）的临时地方。当用户查询数据，首先在缓存中寻找，如果找到了则直接执行。如果找不到，则去数据库中查找。缓存的本质就是用空间换时间，牺牲数据的实时性，以服务器内存中的数据暂时代替从数据库读取最新的数据，减少数据库IO，减轻服务器压力，减少网络延迟，加速处理流程。分布式缓存-概述4常见的缓存有那些文件缓存：文件缓存是把一些需要高速存取的变量缓存在内存中。模板引擎用的就是文件缓存机制，把动态代码编译成静态文件放入硬盘，不用每次访问都编译，直接读出即可。浏览器缓存：浏览器缓存根据一套与服务器约定的规则进行工作，在同一个会话过程中会检查一次井确定缓存的副本足够新。如果在浏览过程中前进或后退时访问到同一个因片，这些图片可以从浏览器缓存中调出而即时显示。数据库缓存：常用的缓存方案有memcached、redis等。把经常需要从数据库查询的数据、或经常更新的数据放入到缓存中，这样下次查询时，直接从缓存直接返回，减轻数据库压力，提升数据库性能。web应用层缓存：应用层缓存指的是从代码层面上，通过代码逻辑和缓存策略，实现对数据、页面、图片等资源的缓存，可以根据实际情况选择将数据存在文件系统或者内存中，减少数据库查询或者读写瓶颈，提高响应效率。分布式缓存-概述5常见的缓存有那些服务器缓存：包括代理服务器缓存和CDN缓存。代理服务器缓存：代理服务器是浏览器和源服务器之问的中间服务器，浏览器先向这个中问服务器发起Web请求，经过处理后(比如权限验证，缓存匹配等），再将请求转发到源服务器。代理服务器缓存的运作原理跟浏览器的运作原理差不多，只是规模更大。可以把它理解为一个共享缓存，不只为一个用户服务，一股为大量用户提供服务，因此在减少响应时间和带宽使用方面很有效，同一个副本会被重用多次。CDN缓存：也叫网关缓存、反向代理缓存。CDN缓存一股是由网站管理员自己部署，为了让他们的网站更容易扩展并获得更好的性能。浏览器先向CDN网关发起Web请求，网关服务器后面对应着一台或多台负载均衡源服务器，会根据它们的负载请求，动态将请求转发到合适的源服务器上。虽然这种架构负载均衡源服务器之问的缓存没法共享，但却拥有更好的处扩展性。从浏览器角度来看，整个CDN就是一个源服务器。分布式缓存-概述6是一种兼容Redis协议的高性能、高可靠、可水平扩展的分布式NoSQL内存数据库产品，支持分库、分表的内存管理，并提供了容灾、恢复、监控、迁移等能力。高可用、高可靠易用高性能乐观锁事务4倍于Redis性能Redis协议分库分表透明接入主从热备恢复速度提升10倍容灾粒度提升到秒级运维管理数据备份迁移集群管理在线扩容、灰度升级监控以及智能运维故障隔离分布式缓存ctgcache概述分布式缓存-概述7支持一致性hash分片算法、自动水平拆分支持单表存储空间在10G-500TB之间支持在线扩容，业务无感知6可扩展性2集群可用性超过

99.95%、节点自愈，故障自动恢复支持平滑数据备份自动隔离性能瓶颈和故障节点，防止雪崩高可用4提供API支持按表垂直扩展，按key水平扩展的透明访问能力，降低开发难度，提升代码质量自带软负载均衡，实现多种负载策略，降低架构复杂度，节约部署成本支持Redis协议，高度兼容Redis单机版协议简单易用3集群支持千万级查询和并发事务，最大性能数十倍于Redis集群;单机20万笔/秒写、30万笔/秒查询，4倍于Redis单机性能自研快照+流水的内存备份技术减少磁盘写入量、控制IO流量，实现平滑备份、降低性能损耗，并使得容灾恢复速度10倍于Redis高性能1实现分库分表模型，降低模型设计的复杂度实现乐观锁事务，支撑高性能的并发修改实现模糊、分页查询，满足特定电信业务场景特色功能5低成本运维可视化、自动化安装部署支持灰度升级、一键式扩容，降低运维难度多维度的监控指标，包括tps、时耗等智能运维，根据应用节点、服务节点、表、操作类型、时耗、错误率等7个维度自动分析故障分布式缓存-特性与功能8数据分片节点1接入机1(access)应用API(control)(client)ZK配置中心接入机实例配置Redis分组配置管理服务（mgr）管理WEB（web）监控数据临时存储监控与监控系统对接接入机2(access)接入机N(access)分片规则连接池负载均衡分片算法监控数据Redis主Agent(toolkits)Redis备Agent(toolkits)数据分片节点NRedis主Agent(toolkits)Redis备Agent(toolkits)Synmonitor调度控制分析节点状态，下发策略触发故障切换分布式缓存-架构示意图9功能大类功能点说明基础能力结构化数据对象操作API提供对常用的数据对象字符串、数组、MAP，有序数组、去重数组等对象操作API；内存分库分组管理提供分库（数据集），分表（分组）的内存存储管理；模糊、分页查询API提供对数组、MAP等集合对象的模糊、分页查询；分布式乐观锁基于乐观锁机制提供内存级访问速度分布式锁功能；水平扩展、透明访问支持水平分片算法支持集群扩展、提供接入层提供透明访问能力；高可用数据强同步及异步复制功能主库、备库间可采用强同步复制或异步复制方式，保障数据的一致性节点故障自动切换功能节点故障自动检测、恢复数据持久化RDB+AOF组合持久化策略，提升备份和恢复效率分区隔离分区资源隔离，异常降级单节点资源访问热点时，该节点访问自动降级开发/运维可视化集群管理集群可视化管理接入、存储集群请求监控/节点状态监控可视化监控各节点状态；支持按表、节点监控请求流量数据备份恢复提数据备份及数据恢复机制安装部署、升级一键安装部署，一键升级，支持灰度缓存客户端API提供Redis源生API、缓存工具类、应用定制API、直连客户端、统一接入客户端分布式缓存-功能列表101

第一部分总体介绍2

第二部分主要技术特性4

第四部分分布式缓存应用场景3

第三部分常见分布式缓存对比分布式缓存

111、当数据库面临大规模数据访问时,磁盘I/O往往成为性能瓶颈，使用缓存可使性能得到数量级提升；

2、在复杂的电信业务场景下,多数都是故障敏感型应用，单点故障或者性能瓶颈往往引起系统的雪崩。

3、具备低延迟高性能、高可用性、复杂业务对象表示、极限事务处理能力的内存存储系统•低延迟高性能尤其在互联网业务场景下，访问量经常会面临十倍、百倍的上涨传统DB分片、读写分离、甚至硬件升级(SSD)等手段无法在性能上有数量级的提升•高可用性基于冗余机制实现高可用性,支持故障的自动发现,透明地实施故障切换，动态扩展时自动均衡数据分区,同时保障服务持续可用•极限事务能力高并发情况下，资源独占锁的事务对整体性能损耗较大，实现类似cas机制解决并发修改事务•支持复杂数据结构List、Set、Map等数据结构电子渠道、互联网用户个性化入口：比如根据手机查询客户信息分布式数据库高频全局索引智慧运营活动促销的抢购、秒杀事务产品、销售品套餐的数据表示低延迟高性能高可用高可靠极限事务能力复杂数据结构内存存储系统分布式缓存-需求背景12配套功能核心能力开源Redis数据类型无阻塞IO数据持久化采集统计服务应用APIJAVASDK分库分表主备故障切换负载均衡策略权限控制节点控制数据备份恢复存储单元化异常处理修复接入单元化监控平台配置平台自动化测试发布平台运维平台软负载均衡监控审计管理接口控制调度引擎故障自动分析分区故障隔离单点故障隔离主备数据无损节点控制开源开源上修改新增性能增强ｰ自研大内存分区、内存池技术实现内存的快速分配回收ｰ将redis的进程模式由单进程改为多进程，并引入IO异步化技术提升单节点的处理性能ｰ自研快照+流水的内存备份技术减少磁盘写入量、控制IO流量，实现平滑备份、降低性能损耗高可用增强ｰ通过自主研发的控制调度引擎，实现主备故障的无损自动切换。研发节点控制组件，实现节点的自动恢复、负载动态平衡等能力ｰ研发软负载均衡API、故障自动接管策略，实现接入层的集群部署和数据访问的弹性伸缩ｰ提供分区分表内存管理模型，实现资源的分区隔离水平可扩展ｰ数据可按应用和功能垂直拆分，可按key水平拆分，通过分布式存储、实现容量和性能的水平扩展ｰ研发接入层屏蔽存储拆分的细节，实现应用的透明访问；乐观锁事务ｰ基于cpu的CAS指令原理消除资源独占锁的时间，在redis基础上实现对单行数据的并发修改，实现极限事务能上述应用背景的要求，远远超出了传统缓存产品所能提供的能力。故分布式缓存平台基于上述背景并结合电信IT应用的实际要求，在开源产品Redis的基础上进行自主研发，实现分库、分表的分布式内存管理，并提供了容灾、恢复、监控、迁移等数据运维能力。分布式缓存-基于传统缓存产品的特性改造13优化redis单进程模型为多进程模式、实现按表（group）垂直共享，大幅提升单机性能（20-30w/s）和资源利用率(90%)；通过水平扩展自动构建集群，突破单机存储的容量和性能瓶颈，单表支持500TB存储，千万级并发；水平拓展：‒多个不同机器上的Redis服务进程构成Redis集群，多机分片存储，突破单机容量瓶颈，多机并发访问，突破单机性能瓶颈‒支持在新增机器上新建Redis服务进程加入原有集群，实现容量与性能的拓展Redis优化：‒Redis是单线程服务进程，单进程模式CPU利用率低，按单机资源自动规划进程数，并实现快照文件串行持久化‒优化存储模型为快照+流水方式，兼顾性能的同时保证的数据可靠性垂直分区：‒Redis集群通过内部分区实现数据隔离‒一个分区归属一个表（group）使用，多表共享集群资源，提升资源利用率分布式缓存-高性能数据存储14研发高性能低延迟的数据服务访问接入层，实现横向扩展组件集群能力，突破数据访问的单机瓶颈；模拟测试可以支持1000个节点，千万级并发；（福建试点3节点集群可到48w/s持续稳定运行）低时延‒异步模型减少队列等待时间‒内存缓冲池加速内存分配‒事件模型实现高并发‒长连接复用机制大幅提升应用并发负载均衡‒根据并发和时延自动扩展新节点‒对低并发节点实行自动退出策略‒实现api级软负载均衡突破硬件负载均衡的单点性能瓶颈‒实现各节点负载情况汇总，制定合理策略达到均衡负载的效果分布式缓存-高性能访问接入15实现主备切换消除单点故障；优化redis持久机制，降低恢复时间90%；实现故障隔离机制避免故障蔓延；快速存储层恢复工具：单点故障秒级自动恢复，并保障数据完整可靠主备切换‒通过agent监控实时数据存储节点状态‒调度控制程序分析节点状态，根据一定权重和策略设置主机故障，执行主备切换‒通过存储时耗和错误码动态汇总分析，提高故障判断准确率快速恢复‒新增RDB+AOF流水备份模式，加快数据恢复‒业务低谷时发起数据备份，降低性能损耗‒通过控制节点根据服务负载情况实现多进程模式部署，实现并行数据恢复‒节点守护进程自动检测，单进程故障秒级恢复故障隔离‒通过存储集群(Data-SET）实现数据存储的分区，并能按group（表）实现存储隔离‒接入层使用异步回调机制，消除故障敏感分布式缓存-高可用数据存储16组件接入单点集群消除单点故障，实现秒级故障恢复；通过按表定义访问接入分区，实现故障按分区隔离，避免故障蔓延；接入路由层，通过无状态设计实现故障节点自动接管；故障转移‒服务节点故障后请求立即发送到可用性最高的节点‒每10s检测该服务节点的错误率和时耗故障隔离‒访问接入层可以自定义访问分区，该分区中提供一批group(表)的路由访问‒应用通过软负载均衡系统与分区中一台接入主机相连，单机故障时只影响该节点上的请求‒配套节点监控使故障节点快速失效，使故障敏感应用能快速连接到正常节点接入层路由‒守护进程自动检测，异常退出秒级恢复‒无状态设计，可以实现秒级故障切换分布式缓存-高可用访问接入17获取元数据：‒源IP、目标IP、分组、响应码、请求量‒节点IP+任意元数据字段可以计算该纬度该节点服务质量汇总：‒目的：在分析效率和故障分析的及时性做一个平衡‒时间粒度：默认为1分钟，时间粒度越小，服务质量下降的发现的时间越短，但需要存储的监控数据量越大，分析耗时越长监控值：‒错误率：根据请求量计算特定错误码的比率‒服务耗时：根据最大耗时、最小耗时、平均耗时计算服务延迟情况策略：‒负载均衡：根据错误码、服务耗时情况定制‒主备恢复：根据redis单元组件错误码定制‒自动扩容：根据内存满的错误码定制模拟运维人员，通过服务质量分析自动判断系统的健康状况，给出特定的运维执行策略。策略包括：负载均衡策略，主备恢复策略，自动扩容策略。分布式缓存-高可用故障快速发现18增强主备故障数据可靠性：‒在主机处理完后，需要等待备机接受，才反回给客户端‒对吞吐量无影响，耗时增加0.3-1ms。‒主机完全故障后，数据无损适合高可靠场景新增回档数据恢复能力：‒通过RDB+AOF配对文件实现数据快速备份‒实现默认延迟备份策略，支持3天数据回档使用异步ack机制优化redis实现主备半同步，提升单点故障的数据可靠性；研发延迟备份系统实现数据回档能力，提供灾难数据恢复能力分布式缓存-数据高可靠19存储层：‒每行数据内置版本号，并兼容原生数据格式‒每种数据类型新增事务处理方法，并兼容原生方法‒优化持久化存储文件格式，并兼容原生格式‒优化主从同步配套事务处理方法，并兼容原生方法‒复杂的大数据提供数据合并功能API层：‒提供每种数据类型的事务提交方法‒提供新命令监控基于cpu的CAS指令原理消除资源独占锁的时间，在redis基础上实现对单行数据的并发修改，实现极限事务能力，性能比无事务请求下降不到1%分布式缓存-乐观锁事务201

第一部分总体介绍2

第二部分主要技术特性4

第四部分分布式缓存应用场景3

第三部分常见分布式缓存对比分布式缓存21•Redis全称为RemoteDictionaryServer（远程数据服务），Redis(RemoteDictionaryServer)是一个使用C语言编写的，开源的（BSD许可）高性能非关系型（NoSQL）的键值对数据库。Redis独特的键值对模型使之支持丰富的数据结构类型，即它的值可以是字符串、哈希、列表、集合、有序集合，而不像Memcached要求的键和值都是字符串。同时由于Redis是基于内存的方式，免去了磁盘I/O速度的影响，因此其读写性能极高。Redis简介分布式缓存-Redis22•MemCache是一个自由、源码开放、高性能、分布式的分布式内存对象缓存系统，用于动态Web应用以减轻数据库的负载。它通过在内存中缓存数据和对象来减少读取数据库的次数，从而提高了网站访问的速度。MemCaChe是一个存储键值对的HashMap，在内存中对任意的数据（比如字符串、对象等）所使用的key-value存储，数据可以来自数据库调用、API调用，或者页面渲染的结果。Memcache简介分布式缓存-Memche23Ctg-cacheRedisMemcache单点故障恢复自动恢复、数据无损自动恢复，数据有损无分区隔离完全隔离，资源繁忙不影响其他节点资源可隔离，但影响整个集群资源可隔离，但影响整个集群扩展能力单表支持10G-500T，支持1000个节点以上集群，支持千万级并发Redis-cluster，客户端直连，并发受限，升级依赖社区客户端API实现，并发受限，升级依赖社区透明访问配置变更、扩容、恢复等操作应用无感知应用需要感知相关操作并做出响应处理方案应用需要感知相关操作并做出响应处理方案数据持久化RDB+AOF、支持同步、异步刷盘RDB或者AOF，异步刷盘无数据备份恢复定时备份+延迟备份无无异常降级节点异常情况下，降级使用，不中断业务无无主从数据可靠异步/同步异步依赖社区安装部署、升级一键安装部署，一键升级，支持灰度手工手工分库分表支持分库分表无无实时监控支持按表、节点动态监控无无节点状态监控支持依赖社区依赖社区多租户支持支持无无可视化集群管理支持无无乐观锁事务支持无支持模糊、分页查询支持无无分布式缓存-与开源产品的对比241

第一部分总体介绍2

第二部分主要技术特性4

第四部分分布式缓存应用场景3

第三部分常见分布式缓存对比分布式缓存25电商业务及活动场景如商品展示、购物推荐、在线选号等以及在大型促销秒杀活动中的库存事务、计数控制等，采用乐观锁事务机制，成倍提升高并发修改数据的性能并保障数据准确。社交应用如社交应用中需要引用海量的用户、好友信息等，若直接跨表或跨库操作，会导致数据库高负载且效率低，采用分布式缓存产品可大大提高性能并降低数据库负载热点计算结果缓存如商业分析、数据挖掘等大数据应用场景中，对分布式计算的中间结果进行缓存，提高整体的运算速度。电信业务中慢接口数据缓存，如全网用户账单清单、账单查询等分布式缓存-应用场景26应用服务集群业务数据库管理服务集群缓存集群更新数据库时同时更新缓存

1、产销品配置

2、群组关系、客户资料；

3、客户与证件号、接入号等映射关系

4、产品、销售品销量排行榜1应用服务集群业务数据库异步服务模块缓存集群持久化入库

1、营销活动购物车、浏览的轨迹；

2、抢购秒杀库存；

3、在线选号、预占；2分布式缓存-应用场景27应用1缓存集群应用服务集群

1、流式计算中的中间结果缓存、汇聚、排序等

2、外部服务能力缓存：比如缓存热点用户账单、清单扩展业务峰值能力

1、分布式锁

2、分布式session34缓存集群外部服务能力运算结果输出存储应用服务集群应用2分布式缓存-应用场景28组件名称主要功能适用场景研发状态基于的开源软件版本已改进内容分布式缓存

1、具备高性能分布式集群部署能力，提供水平扩展及数据透明访问能力

2、具备NoSQL结构数据处理能力，支持结构数据的模糊、分页查询

3、故障自动切换恢复

4、具备高性能、高一致性的数据强同步方案

5、支持数据库级数据持久化能力

6、具备数据备份、运维监控管理等配套功能

7、具备分布式乐观事务锁能力适合大中型系统内存如此场景

1、热点数据的分级存储场景如数据库全局索引

2、热点数据缓存场景如产品/销售品配置，主数据、

3、高频过程数据存储如高频外部接口数据缓存、会话session、订单分布式处理事务锁已使用

1、福建:分布式数据库全局索引、配置缓存、会话共享、双写比对

2、上海：星级客户/CRM，UAM等系统

3、集团：物联网CRM/计费系统POC验证中湖南：CRM、计费基于开源redis

3.2+

1、多租户管理

2、分库分表模型

3、研发接入层实现透明访问

4、优化了数据持久化效率，提升了数据可靠性

5、增强了集群扩展能力

6、支持按表、节点动态监控等维度请求监控

7、实现乐观锁、模糊分页等特定场景功能

8、一键部署、集群可视化管理、故障自动恢复

9、故障租户隔离10、数据自动备份回复、延迟备份回复分布式缓存-使用情况29主要场景的业务指标：

1、批量受理（5分钟10万，约400/秒）

2、外部接口查询（1000/秒，时延<500ms、超时率<0.0001）主要挑战：

1、

3.0模型中对场景有非常细化的数据约束：a)主表、属性表、属性值配置、约束以及产销品实例化等；b)单个产品属性和约束涉及到上百个SQL；属性实例化值又是一个倍增的关系；综上对数据存储的要求估算TPS:4万-10万/秒QPS：20-40万秒

2、分布式环境下挑战c)广播SQL：实例中心分以客户标识水平分24个片，以接入号、实例标识来查询时SQL查询量*24；d)业务约束跨节点无法使用数据库事务主要解决思路：

1、对关系数据模型进行结构化封装、降低交互次数a)使用缓存的集合数据类型，使用常用查询纬度做为key，如产销品配置、b)使用实例化的java对象做为缓存对象c)以订单纬度生成结构化数据到缓存，使用缓存做为订单流转的中间存储d)使用本地缓存降低时延

2、使用缓存快速建立全局索引降低广播语句a)梳理热点业务场景，且该场景无法获取数据库分片键，如根据接入号、证件号定位客户等场景b)外部服务接口原样承接，如根据实例id查完整客户信息

3、使用缓存的分布式事务锁解决并发冲突分布式缓存-物联网系统缓存的使用30物联网系统中主要用与产品销售品配置、在途单流转数据、数据库全局索引、缓存、分布式session、分布式事务锁集群实例峰值均值占用空间报文大小共享一主一丛两台物理机（512G内存，4路8核，raid10,万兆网卡）Crm索引11全局索引20w/s写索引重建10000/s查2000/s60G/220G<1K

99.9%>32K0.1%CRM应用7Session400/s读写100/s50m/140G>32K100%产销品配置100/s(本地缓存5w/s)100/s1G/140G<1K45%>32K45%<1K10%订单流转数据6000/s读写6000/s35G/140G>32K100%订单锁7000/s写7000/s10M/140G<1k100%一主一丛两台物理机（同上）计费索引11全局索引20w/s写索引重建20000/s查询6000/s40G/220G<1K

99.95%>32K0.05%分布式缓存-物联网使用情况311

第一部分总体介绍2

第二部分主要技术特性4

第四部分分布式消息应用场景3

第三部分常见分布式消息对比分布式消息队列分布式消息中间件CTGMQ什么是消息队列•消息队列（MQ）是分布式系统中重要的组件，"消息队列"是在消息的传输过程中保存消息的容器。消息队列管理器在将消息从它的源中继到它的目标时充当中间人。队列的主要目的是提供路由并保证消息的传递;如果发送消息时接收者不可用，消息队列会保留消息，直到可以成功地传递它。•当不需要立即获得结果，但是并发量又需要进行控制的时候，差不多就是需要使用消息队列的时候。•消息队列主要解决了应用耦合、异步处理、流量削峰等问题。分布式消息队列33•当前使用较多的消息队列有RabbitMQ、RocketMQ、ActiveMQ、Kafka、ZeroMQ、MetaMq等，而部分数据库如Redis、Mysql以及phxsql也可实现消息队列的功能。•CTG-MQ是在阿里开源分布式消息中间件RocketMQ的基础上，进行问题修复与优化，并自主研发，实现低成本、高可靠、高性能和具备监控运维能力的消息中间件产品。•分布式消息中间件(CTG-MQ)提供高效可靠的消息传递服务，解决分布式应用系统之间的消息数据通信难题，用于系统间的解耦。分布式消息队列-概述系统模块。。。系统CTG-MQ系统分布式消息中间件数据节点1数据节点2数据节点N系统模块。。。生产消费什么是CTG-MQ消息队列34分布式消息队列-概述应用耦合：多应用间通过消息队列对同一消息进行处理，避免调用接口失败导致整个过程失败；异步处理：多应用对消息队列中同一消息进行处理，应用间并发处理消息，相比串行处理，减少处理时间；限流削峰：广泛应用于秒杀或抢购活动中，避免流量过大导致应用系统挂掉的情况；消息驱动的系统：系统分为消息队列、消息生产者、消息消费者，生产者负责产生消息，消费者(可能有多个)负责对消息进行处理；消息队列的应用场景消息中间件是实现分布式架构的核心基础，负责模块解耦、模块间高性能数据传输，同时在高峰期发挥数据缓冲作用。对主流消息中间件进行选型后，综合这些产品在消息可靠性、易用性、定制化上的特点，均不能达到要求，因此需要自主研发消息中间件。功能项RocketMQKafkaRabbitMQActiveMQ消息高可靠可靠性高机器重启消息可能丢失高负载下消息可能丢失，客户端或服务端重启消息可能重复可靠性高，但可能出现消息重复或丢失2K消息大小，亿级堆积能力性能损耗<10%性能损耗<10%性能损耗<50%性能损耗<25%主备模式可能出现异常开源系统bug修复依赖社区依赖社区依赖社区依赖社区API易用性自定义协议自定义协议支持多种消息协议支持多种消息协议运维能力不支持不支持Web监控台Web监控台定制化需求不支持不支持不支持不支持客户端支持仅JavaJava、C++等Java、C++等Java、C++等分布式事务消息不支持不支持不支持不支持传统消息中间件遇到的问题：传统消息中间件在线横向扩展能力不足，不具备应对业务快速增长及突发业务高峰的处理能力传统消息中间件由于服务与存储的集中化，为了应对少量的峰值，需过度配置资源，导致总体利用率低下管理维护成本随消息服务器、存储、软件的增加急剧增加分布式消息中间件的优势：分布式消息中间件能够做到在线横向扩展，突破性能瓶颈，平稳地应对业务快速增长及突发业务高峰分布式消息中间件可使消息服务、存储实现了云化，提高资源利用率，实现规模经济效益能够快速构建和部署应用系统，快速满足业务需求，减少人力成本分布式消息队列-传统MQvs分布式MQ36分布式消息队列-CTGMQ基于阿里开源产品RocketMQ进行问题修复与优化，并自主研发，实现低成本、高可靠、高性能和具备监控运维能力的中间件产品使用开源RocketMQ遇到的问题：功能不完善：功能比较单一，针对不同应用场景无法有效支持，如消息轨迹查询，严格消费机制，数据自动删除策略等。可维护性差：缺乏配套监控运维能力，难以迅速发现解决如消息堆积、队列堵塞等问题。可靠性较低：消息服务不提供主备切换能力，存在单点故障，无法保证服务高可用改进点：高可用、高可靠改进：实现自动主备切换、自动拉起功能，保证服务高可用实现消息删除策略，按不同的场景优先保证服务可用性或者数据安全性。可维护性改进：实现按生产者、消费者、数据节点、队列4种维度的运行状态监控，方便快速发现问题实现可视化的监控、配置、管理界面实现自动化测试，以快速迭代新增功能：新增消息轨迹收集、分析与查询，做到可查可追踪新增严格的消费机制，满足消费严格不重复的应用需求重新封装SDK，简化应用使用，并提供按hash算法实现消息局部有序生产消费应用层服务层JAVA客户端消息中间件C++客户端队列创建消息发送消息发布主题侦听队列侦听主题订阅消息消费消息应答命令行工具统一API扩展组件消息去重组件消费查询组件消息推送组件级联插件管理Broker服务顺序消息消息查询消息轨迹命名服务消费重试消息事务集群消费存储层存储组件存储引擎分离基础库通信组件公共库消息监控管理管理控制台消息持久化过载保护权限控制监控预警功能架构特点：

1.功能明确分层•核心功能保持简单稳定•扩展组件实现外围功能

2.服务层提供丰富接口•消息接口•管理接口•统计数据•运行与状态数据

3.抽象存储层•支持多种存储引擎

4.公共组件封装基础库•通信协议封装与优化分布式消息队列-CTGMQ功能架构381

第一部分总体介绍2

第二部分主要技术特性4

第四部分分布式消息应用场景3

第三部分常见分布式消息对比分布式消息队列CtgMQ基于开源产品RocketMQ进行自主研发，支持海量高并发、高性能的消息传输，广泛应用在异步解耦、数据可靠传输复制、事件广播/通知、分布式事务一致性等业务场景，提供分布式事务消息，支持生产者消费者模式，提供消息过滤、定时过滤等功能，可替代kafka等开源MQ产品。技术特性-概述产品特点−消息点对点、发布/订阅、顺序消息，保证消息严格有序−消息堆积，不超过内存大小无性能影响，超过内存大小写入磁盘，影响小于10%−针对行业应用特点进行API封装，屏蔽无关细节−支持Java、,C++客户端，突破开源产品限制−管理监控台，MQ运行状态可视化展现，方便快捷−事务消息机制，提供分布式事务的最终一致性支持−高可靠保障模式，单机最大TPS

16.7(万条/s)，单主备TPS

2.5(万条/s)−高性能模式，单机最大TPS

31.7(万条/s)−亿条2k大小消息堆积，生产消费性能影响<10%−集群扩展系数=0.92性能指标40技术特性-分布式生产者生产者的RoundBin模式：在ctg-mq中，生产者默认是按roundbin的方式轮询如图所示，5个队列可以部署在一台机器上，也可以分别部署在5台不同的机器上，发送消息通过轮询队列的方式发送，每个队列接收平均的消息量。通过增加Broker，可以水平扩展队列容量。另外也可以自定义方式选择发往哪个队列。消费者负载均衡：如图所示，如果一个topic有5个队列，2个consumer，那么第一个Consumer消费3个队列，第二consumer消费2个队列。这样即可达到平均消费的目的，可以水平扩展Consumer来提高消费能力。但是Consumer数量要小于等于队列数量，如果Consumer超过队列数量，那么多余的Consumer将不能消费消息。队列数量消费者数Rebalance结果52C1:3C2:263C1:2C2:2C3:21020C1~C10:1C11~C20:0206C1:4C2:4c3~C6:3技术特性-分布式消费者42技术特性-高性能、高堆积-生产消费关键性能指标：数据堆积能力：亿条2k大小消息堆积，生产消费性能影响<10%最高可靠保障模式，单主备TPS

2.5(万条/s)最底可靠保障模式，单机最大TPS

16.7(万条/s)生产平均响应时间，1KB消息体<1ms，128KB消息体<3ms集群扩展系数=0.92内蒙古机房机器-主备broker（同步落盘、同步复制）producer客户端机器*进程*线程消息大小(Byte)TPS(条/s)平均响应(ms)吞吐量(MB/s）1*1*1102410580.

9451.0332031251*1*1204810110.

9881.9746093751*1*140

969331.0

713.644531251*1*1102400

3862.

58737.69531251*1*1204800

1975.0

7438.47656253*5*1010

2425639.

235.

86525.038310553*5*102048250

57.

295.

93948.940019533*5*1040

9622241.

786.

88286.881953133*5*1102400230

8.

846.

574225.47265633*2*1204800

928.

216.

849181.29101563*5*6410

2421961.

849.40

121.447070313*5*6420

4823863.

9341.

88146.609238283*5*6440

9618883.4150.

11573.763320313*5*6410240020

92.

98459.9420

4.39257813*5*64204800

1241.

55786.90

8242.490234443技术特性-数据高可靠（刷盘机制）异步刷盘：写完PAGECACHE直接返回性能极高有丢失数据的可能同步刷盘：同步刷盘需要等待刷盘完成才返回同步刷盘步骤：

(1)写入PAGECACHE后，线程等待，通知刷盘线程刷盘

(2)刷盘线程刷盘后，唤醒前端等待线程，可能是一批线程。

(3)前端等待线程向用户返回成功性能较异步刷盘差能保证用户收到成功的影响时，数据一定在磁盘上CTG-MQ的所有消息都是持久化的，先写入系统PAGECACHE，然后刷盘，可以保证内存与磁盘都有一份数据44技术特性-服务高可用集群接入高可用(NameServer)通过多个集群管理服务+故障自动切换，实现集群接入点的高可用消息服务高可用(Broker)通过生产与消费的自动负载均衡，实现Failover，保证某一组服务在全挂的情况下，不影响整体业务通过自主研发的自动主备切换，实现主机故障自动备升主，保证服务连续性，自动主备切换可剥离通过消息过期删除策略，保证服务的可持续性集群接入层集群管理服务应用层应用应用应用应用消息中间件节点群主节点备节点消息服务数据存储集群管理服务集群管理服务集群管理服务主节点备节点主节点备节点主节点备节点45技术特性-有序消费无序消息、顺序消息，更多是针对消费者来说的。不同的队列数，配上不同的生产模式、消费者模式，可以适用于无序消费，有序消费的场景有序消费的缺点：发送顺序消息无法利用集群FailOver特性消费顺序消息的并行度依赖于队列数量队列热点问题，个别队列由于哈希不均导致消息过多，消费速度跟不上，产生消息堆积问题遇到消息失败的消息，无法跳过，当前队列消费暂停461

第一部分总体介绍2

第二部分主要技术特性4

第四部分分布式消息应用场景3

第三部分常见分布式消息对比分布式消息队列47分布式消息队列方案CtgMQRocketMQKafkaRabbitMQActiveMQ消息高可靠不丢失可靠性高机器重启消息可能丢失高负载下消息可能丢失，客户端或服务端重启消息可能重复可靠性高，但可能出现消息重复或丢失2K消息大小，亿级堆积能力性能损耗<10%性能损耗<10%性能损耗<10%性能损耗<50%性能损耗<25%主备模式可能出现异常开源系统bug修复核心源码掌控程度达100%，可持续自主维护依赖社区依赖社区依赖社区依赖社区API易用性自定义协议自定义协议自定义协议支持多种消息协议支持多种消息协议运维能力完整的运维功能无无Web监控台Web监控台定制化需求自主研发，纳入迭代开发无无无无客户端支持Java，C++仅JavaJava、C++等Java、C++等Java、C++等分布式事务消息事务消息无无无无481

第一部分总体介绍2

第二部分主要技术特性4

第四部分分布式消息应用场景3

第三部分常见分布式消息对比分布式消息队列49分布式消息-应用场景场景一：异步处理传统架构优点：1）后端服务处理能力弹性可扩展2）消息中间件有效缓冲高并发压力，避免后端支撑系统崩溃服务处理服务处理服务处理服务处理服务处理服务处理...分布式架构缺点：1）高并发请求，容易导致系统崩溃50分布式消息-应用场景场景一：异步处理传统架构优点：1）后端服务处理能力弹性可扩展2）消息中间件有效缓冲高并发压力，避免后端支撑系统崩溃服务处理服务处理服务处理服务处理服务处理服务处理...分布式架构缺点：1）高并发请求，容易导致系统崩溃计费分布式服务处理架构示意图场景二：模块间解耦基于消息中间件实现计费系统解耦，完全灵活的弹性扩展基于消息中间件实现计费系统解耦，完全灵活的弹性扩展分布式消息-应用场景场景三：分布式事务，事务最终一致性分布式消息-应用场景−为面向服务架构（SOA）提供分布式事务支持，降低模块间的耦合度，缓冲高并发压力，保证全局数据的一致性场景四：数据同步GoldenGateORACLE队列队列模型转换/业务处理UDAL1UDAL1UDAL2UDAL2MYSQL变化数据

1.需要进行异构数据库数据复制的场景

2.基于数据变更触发的应用

3.跨主机、跨IDC、跨地域的数据可靠同步，满足分库分表等业务需求分布式消息-应用场景其它典型应用场景−以异步方式高效汇聚日志，支持高TPS数据的实时流式计算及或离线分析海量日志同步事件广播/通知−分布式系统中可靠的集群内广播通知，可用于广播消息的客户端实现−Cache失效、变更、新增等事件通知−将消息中间件作为可靠的延迟队列，轻松实现任务定时分发等功能−分布式环境下的定时器延迟队列分布式消息-应用场景能力开放接入能力对外部提供各类IT服务能力，并对接入进行管理控制。接入能力通过分布式消息中间件与核心服务能力降耦，实现灵活扩展，提高对外部接入的适配能力以及访问高吞吐并发能力。核心服务能力提供核心的CRM、计费账务、网元以及积分能力，并提供灵活的服务编排裁剪能力，将服务能力进行组装后按需满足各个业务场景的需要。核心服务能力是主题消息的生产者，为能力开放运营管理提供数据。能力开放运营管理是能力开放消息的订阅者，根据核心能力的调用情况，完成进行特定的计费、对账以及预警功能。基于消息中间件的日志存储与查询，采集能力调用过程中的日志信息，进行分布式的存储。并提供操作页面进行直接查询。能力开放门户为能力使用者提供自助的门户进行能力操作；为内部管理人员提供能力的监控管理。能力类型数量客户类能力234客户信息查询、客户新建、...订单类能力156订购、退订、改性能、加装包订购、...服务类能力27催装改约、服务单查询、...创新类能力10流量池订购、...集团支撑类83集团4G校验单、...其他远程写卡、积分礼品兑换、...分布式消息-应用案例（IT能力开放平台）订购服务消息中间件核心CRM核心CRM受理应用受理应用

1、受理订单

2、订单放入中间件基于消息中间件的最佳实践方案

3、反馈订单已收到

3、CRM逐条读取处理受理结果通知服务

4、处理结果通知

5、通知反馈

6、通知反馈毫秒级问题：渠道或第三方应用为提升用户使用感知，需要系统能在较快的时间内给出反馈。通常一个系统间交互的时间要小于500毫秒。某些传统业务的处理过程耗时较长，不符合互联网时代的用户体验趋势。因此需要一种新的模式来提高系统响应性能。基于消息中间件的应用效果：通过中间件异步隔离的特性，将一个处理耗时较长的请求拆分为两次较短的交互，用户能在第一时间得知处理情况，大大提高了用户感知。分布式消息-应用效果HTTP接入组件客户信息查询插件鉴权插件账务资料查询插件REST调用HTTP接入组件鉴权插件MQ接入组件鉴权插件HTTP接入组件鉴权插件客户信息查询插件客户信息查询插件消息中间件问题：服务能力的处理要求越来越灵活，有些服务需要编排组合、有些需要进行数据脱敏的后处理、有些服务需要做一些预处理的格式加工工作等，并且新的处理要求会越来越丰富。传统的固化的服务处理过程，因为扩展性差，往往无法满足第三方服务快速接入的要求。服务组合组件流量控制组件数据脱敏组件服务路由组件更多扩展组件拆解各服务处理组件，通过消息中间件灵活组合的最佳实践基于消息中间件的应用效果：各个组件通过与消息中间件交互串联起来，实现接口服务。但某个组件遇到资源瓶颈时，可以在不影响其他组件的情况下单独扩容。分布式消息-应用效果问题：能力平台传送的以下两类消息具有很强的可靠性要求，需要在处理过程中严格不重复消费，严格不丢失订单请求：订单消息丢失，会对客户造成直接或间接的经济损失，如多收一个月费用或业务开通时间延长等。极大的影响了用户对电信的感知。日志消息：在能力平台运营过程中，调用日志是作为计费核对的重要依据，日志消息丢失会对对账、查证造成很大的影响。消息中间件不重不丢订单数据日志数据基于中间件的应用效果：通过分布式消息中间件的最大保护模式，保证收到发送成功确认的消息，在非极端异常情况下不丢失，并在严格消费模式下不会发生消费重复。分布式消息-应用效果中国电信云荐社区建设数字化综合网格，做强云改数转最后一公里！

